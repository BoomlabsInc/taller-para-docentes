<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
  <head>
    <title>04-analisis.utf8.md</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="include/aprender.css" type="text/css" />
  </head>
  <body>
    <textarea id="source">

---
class: title-slide, middle, center
# Análisis de Datos

---
class: regular
# Pasos del análisis 

&lt;img src="include/05-pasos-1.png" width="1000" height="400" style="display: block; margin: auto;" /&gt;

---
class: regular
# Todos corren en **R**

&lt;img src="include/05-pasos-2.png" width="1000" height="450" style="display: block; margin: auto;" /&gt;

---
class: regular
#  **Paquetes de R** facilitan el análisis

&lt;img src="include/05-pasos-3.png" width="1000" height="450" style="display: block; margin: auto;" /&gt;

---
class: title-slide, middle, center
# Introduciendo el `tidyverse`

---
class: regular
# ¿Que es el `tidyverse`?

.left-column[
&lt;img src="include/hex/tidyverse.png" width="280" height="300" style="display: block; margin: auto;" /&gt;
]
.right-column[

* Una colección de paquetes de R

* Diseñados para la Ciencia de Datos

* Todos utilizan la misma **filosofía de diseño**, **gramática** y **estructuras de datos**.

]

---
class: regular
# La meta del `tidyverse`
### Resolver problemas complicados mediante la combinación de diferentes piezas que son consistentes unas con otras.

&lt;img src="include/05-meta-tidyverse.png" width="400" height="350" style="display: block; margin: auto;" /&gt;

---
class: regular
# Lo que cubre el `tidyverse` 

&lt;img src="include/cubre-tidyverse.png" width="1000" height="450" style="display: block; margin: auto;" /&gt;

---
class: dark, middle, center
# Paquetes del `tidyverse`

---
class: regular

# Leér

.left-column[
&lt;img src="include/05-paquetes-leer.png" width="330" height="400" style="display: block; margin: auto;" /&gt;
]
.right-column[
* `readr` - Archivos CSV, texto

* `jsonlite` - Archivos JSON

* `readxl` - Archivos Excel

* `rvest` - Páginas Web

* `xml2` - Archivos XML
]

---
class: regular

# Ordenar y Transformar

.left-column[
&lt;img src="include/05-paquetes-ordenar.png" width="300" height="400" style="display: block; margin: auto;" /&gt;
]
.right-column[
* `tidyr` - Ordernar datos

* `dplyr` - Transformar datos

* `stringr` - Manejo de texto

* `lubridate` - Para fechas

* `forcats` - Factoriales
]
---
class: regular

# Visualizar

.left-column[
&lt;img src="include/hex/ggplot2.png" width="280" height="300" style="display: block; margin: auto;" /&gt;
]
.right-column[
* `ggplot2` - Visualizar datos
]

---
class: regular

# Otros

.left-column[
&lt;img src="include/hex/purrr.png" width="280" height="300" style="display: block; margin: auto;" /&gt;
]
.right-column[
* `purrr` - Programación funcional (para ciclos ó repeticiones)
]

---
class: dark, middle, center
# Los principios del `tidyverse`

---
class: regular
## Principio #1 - Use datos *ordenados*

--
1. Cada línea es una observación


--
1. Cada columna es una variable


--

.left-column[
### No

```
## # A tibble: 1 x 3
##   nombre     enero febrero
##   &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;
## 1 Juan Perez    90      60
```
]
.right-column[
### Sí

```
## # A tibble: 2 x 5
##     mes  anio primer apellido puntos
##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;
## 1     1    99 Juan   Perez        90
## 2     2    99 Juan   Perez        60
```
]

---
class: regular
## Principio #2 – Cada función es un paso 

--
* Seleccione las calificaciones de Matemática &lt;br/&gt; `m &lt;- filter(datos, materia == "mate")`


--
* Agrupa por cada primer nombre y apellido &lt;br/&gt; `alumno &lt;- group_by(m, primer, apellido)`


--
* Calcule el promedio de las calificationes &lt;br/&gt; `pr &lt;- summarise(alumno, mean(puntos))`


--
* Imprime los resultados &lt;br/&gt; `pr`

---
class: regular
## Problemas con el código

--
### 1. Creamos variables que usamos solo una vez

--
### 2. Es difícil de leer, y entender, todo los pasos rápidamente.

--

### `m &lt;- filter(datos, materia == "mate")`
### `alumno &lt;- group_by(m, primer, apellido)`
### `pr &lt;- summarise(alumno, mean(puntos))`
### `pr`

---
class: regular
## Principio #3 - Combine con `%&gt;%`

--
### Antes

 ```r
mate &lt;- filter(datos, materia == "matematica")
alumno &lt;- group_by(mate, primer, apellido)
promedio &lt;- summarise(alumno, promedio = mean(puntos))
promedio
```

--
### Después

```r
datos %&gt;%
  filter(materia == "matematica") %&gt;%
  group_by(primer, apellido) %&gt;%
  summarise(promedio = mean(puntos))
```

---
class: regular
# Los principios del `tidyverse`

--

1. Las estructuras principales son datos ordenados

--

1. Cada función representa un paso

--

1. Las funciones se combinan con `%&gt;%`

---
class: exercise, middle, center
## Ejercicio
# Analizar Datos con el `tidyverse`
### **Archivo:** 04-tidyverse.Rmd
    </textarea>
<style data-target="print-only">@media screen {.remark-slide-container{display:block;}.remark-slide-scaler{box-shadow:none;}}</style>
<script src="https://remarkjs.com/downloads/remark-latest.min.js"></script>
<script>var slideshow = remark.create({
"countIncrementalSlides": true,
"highlightLines": true,
"highlightStyle": "github",
"ratio": "16:9"
});
if (window.HTMLWidgets) slideshow.on('afterShowSlide', function (slide) {
  window.dispatchEvent(new Event('resize'));
});
(function(d) {
  var s = d.createElement("style"), r = d.querySelector(".remark-slide-scaler");
  if (!r) return;
  s.type = "text/css"; s.innerHTML = "@page {size: " + r.style.width + " " + r.style.height +"; }";
  d.head.appendChild(s);
})(document);

(function(d) {
  var el = d.getElementsByClassName("remark-slides-area");
  if (!el) return;
  var slide, slides = slideshow.getSlides(), els = el[0].children;
  for (var i = 1; i < slides.length; i++) {
    slide = slides[i];
    if (slide.properties.continued === "true" || slide.properties.count === "false") {
      els[i - 1].className += ' has-continuation';
    }
  }
  var s = d.createElement("style");
  s.type = "text/css"; s.innerHTML = "@media print { .has-continuation { display: none; } }";
  d.head.appendChild(s);
})(document);
// delete the temporary CSS (for displaying all slides initially) when the user
// starts to view slides
(function() {
  var deleted = false;
  slideshow.on('beforeShowSlide', function(slide) {
    if (deleted) return;
    var sheets = document.styleSheets, node;
    for (var i = 0; i < sheets.length; i++) {
      node = sheets[i].ownerNode;
      if (node.dataset["target"] !== "print-only") continue;
      node.parentNode.removeChild(node);
    }
    deleted = true;
  });
})();</script>

<script>
(function() {
  var links = document.getElementsByTagName('a');
  for (var i = 0; i < links.length; i++) {
    if (/^(https?:)?\/\//.test(links[i].getAttribute('href'))) {
      links[i].target = '_blank';
    }
  }
})();
</script>

<script>
slideshow._releaseMath = function(el) {
  var i, text, code, codes = el.getElementsByTagName('code');
  for (i = 0; i < codes.length;) {
    code = codes[i];
    if (code.parentNode.tagName !== 'PRE' && code.childElementCount === 0) {
      text = code.textContent;
      if (/^\\\((.|\s)+\\\)$/.test(text) || /^\\\[(.|\s)+\\\]$/.test(text) ||
          /^\$\$(.|\s)+\$\$$/.test(text) ||
          /^\\begin\{([^}]+)\}(.|\s)+\\end\{[^}]+\}$/.test(text)) {
        code.outerHTML = code.innerHTML;  // remove <code></code>
        continue;
      }
    }
    i++;
  }
};
slideshow._releaseMath(document);
</script>
<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
(function () {
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src  = 'https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML';
  if (location.protocol !== 'file:' && /^https?:/.test(script.src))
    script.src  = script.src.replace(/^https?:/, '');
  document.getElementsByTagName('head')[0].appendChild(script);
})();
</script>
  </body>
</html>
